<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CLI_Verbs_AppAttach_Prop_CreateScript" xml:space="preserve">
    <value>If specified, sample PS1 scripts for registration and de-registration will be created. This is currently supported only for VHD volumes.</value>
  </data>
  <data name="CLI_Verbs_AppAttach_Prop_Directory" xml:space="preserve">
    <value>Output directory.</value>
  </data>
  <data name="CLI_Verbs_AppAttach_Prop_ExtractCertificate" xml:space="preserve">
    <value>If specified, digital certificate will be extracted from the specified package.</value>
  </data>
  <data name="CLI_Verbs_AppAttach_Prop_FileType" xml:space="preserve">
    <value>The type of the output file.</value>
  </data>
  <data name="CLI_Verbs_AppAttach_Prop_Name" xml:space="preserve">
    <value>File name for the output file. If left empty, the MSIX file name without extension will be used. This parameter is not used in case of multiple input packages.</value>
  </data>
  <data name="CLI_Verbs_AppAttach_Prop_Package" xml:space="preserve">
    <value>Full paths to MSIX packages to be converted to app attach format. If the path is a directory, then all MSIX from the folder will be converted.</value>
  </data>
  <data name="CLI_Verbs_AppAttach_Prop_Size" xml:space="preserve">
    <value>Size of the container (in MB). Leave empty for auto-selection.</value>
  </data>
  <data name="CLI_Verbs_AppAttach_VerbName" xml:space="preserve">
    <value>Creates app attach volume for MSIX packages.</value>
  </data>
  <data name="CLI_Verbs_Dependencies_Prop_Path" xml:space="preserve">
    <value>The path to the package.</value>
  </data>
  <data name="CLI_Verbs_Dependencies_VerbName" xml:space="preserve">
    <value>Creates a list of relations between package dependencies, including nested dependencies, add-ons and system dependencies.</value>
  </data>
  <data name="CLI_Verbs_Edit_AddCapability_Prop_Name" xml:space="preserve">
    <value>The name of the capability to add.</value>
  </data>
  <data name="CLI_Verbs_Edit_AddCapability_VerbName" xml:space="preserve">
    <value>Adds a specified capability to the package manifest.</value>
  </data>
  <data name="CLI_Verbs_Edit_AddFile_Prop_Force" xml:space="preserve">
    <value>If set then in case the target file exists it will be overridden.</value>
  </data>
  <data name="CLI_Verbs_Edit_AddFile_Prop_Source" xml:space="preserve">
    <value>Source file from disk.</value>
  </data>
  <data name="CLI_Verbs_Edit_AddFile_Prop_Target" xml:space="preserve">
    <value>Target relative path to current file.</value>
  </data>
  <data name="CLI_Verbs_Edit_AddFile_VerbName" xml:space="preserve">
    <value>Adds or replaces a specific file in the package.</value>
  </data>
  <data name="CLI_Verbs_Edit_DeleteFile_Prop_FilePath" xml:space="preserve">
    <value>Relative path to removed file (file asterisks are supported).</value>
  </data>
  <data name="CLI_Verbs_Edit_DeleteFile_VerbName" xml:space="preserve">
    <value>Deletes a specific file from the package.</value>
  </data>
  <data name="CLI_Verbs_Edit_DeleteRegistryKey_Prop_RegistryKey" xml:space="preserve">
    <value>A registry path (for example HKLM\Software\abc) of a registry key to be deleted.</value>
  </data>
  <data name="CLI_Verbs_Edit_DeleteRegistryKey_VerbName" xml:space="preserve">
    <value>Deletes a specific registry key.</value>
  </data>
  <data name="CLI_Verbs_Edit_DeleteRegistryValue_Prop_RegistryKey" xml:space="preserve">
    <value>A registry path (for example HKLM\Software\abc) of a registry key containg the value to be deleted.</value>
  </data>
  <data name="CLI_Verbs_Edit_DeleteRegistryValue_Prop_RegistryValueName" xml:space="preserve">
    <value>A value name to be deleted.</value>
  </data>
  <data name="CLI_Verbs_Edit_DeleteRegistryValue_VerbName" xml:space="preserve">
    <value>Deletes a specific registry value.</value>
  </data>
  <data name="CLI_Verbs_Edit_ImportRegistry_Prop_File" xml:space="preserve">
    <value>A .reg file (Windows Registry) to be imported.</value>
  </data>
  <data name="CLI_Verbs_Edit_ImportRegistry_Prop_RegistryKey" xml:space="preserve">
    <value>A local registry path (for example HKLM\Software\abc) of a registry key to be imported.</value>
  </data>
  <data name="CLI_Verbs_Edit_ImportRegistry_VerbName" xml:space="preserve">
    <value>Imports registry from .reg file or local Registry.</value>
  </data>
  <data name="CLI_Verbs_Edit_InjectPsf_ApplicationIds" xml:space="preserve">
    <value>Identifiers of applications, for which PSF runtime will be used. Simple wildcards (* and ?) and regular expressions (/&lt;regex&gt;/) are also supported. If left empty or omitted, all win32 applications will be considered.

Parameters applicationIds and fileNames are mutually exclusive.</value>
  </data>
  <data name="CLI_Verbs_Edit_InjectPsf_FileNames" xml:space="preserve">
    <value>Start file names of applications, for which PSF runtime will be used. Simple wildcards (* and ?) and regular expressions (/&lt;regex&gt;/) are also supported. If left empty or omitted, all win32 applications will be considered.

Parameters applicationIds and fileNames are mutually exclusive.</value>
  </data>
  <data name="CLI_Verbs_Edit_InjectPsf_Force" xml:space="preserve">
    <value>If set, this allows replacing existing PSF framework. By default, if PSF runtime is already present in the package, no replacement will be done.</value>
  </data>
  <data name="CLI_Verbs_Edit_InjectPsf_VerbName" xml:space="preserve">
    <value>Injects PSF runtime and readdress entry points of specified or all applications.</value>
  </data>
  <data name="CLI_Verbs_Edit_List_Prop_File" xml:space="preserve">
    <value>File path to a file containing the instructions to execute. If not provided, the user can provide the required content from the console.</value>
  </data>
  <data name="CLI_Verbs_Edit_List_VerbName" xml:space="preserve">
    <value>Executes a list of commands, either from a file or from a command prompt.</value>
  </data>
  <data name="CLI_Verbs_Edit_Prop_PackagePath" xml:space="preserve">
    <value>Full path to the edited package.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetBuildMetaData_Prop_Name" xml:space="preserve">
    <value>The name of the component, for example SignTool.exe.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetBuildMetaData_Prop_Version" xml:space="preserve">
    <value>The version of the component, for example 1.0.0.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetBuildMetaData_VerbName" xml:space="preserve">
    <value>Adds a specified build meta data to the package manifest.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetIdentity_Prop_Name" xml:space="preserve">
    <value>The package name.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetIdentity_Prop_ProcessorArchitecture" xml:space="preserve">
    <value>The processor architecture, for example x64, arm or Neutral.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetIdentity_Prop_Publisher" xml:space="preserve">
    <value>The DN string of a publisher.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetIdentity_Prop_ResourceId" xml:space="preserve">
    <value>The resource ID.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetIdentity_Prop_Version" xml:space="preserve">
    <value>The package version. It must be a valid version string. You can also write 'auto' to autoincrement the version, or use placeholders ^ or + to increase a unit, and 'x' or '*' to keep the unit. For example, the version *.*.+.0 would keep the major and minor version from the current value, increase the third position by one, and reset the fourth position to 0.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetIdentity_VerbName" xml:space="preserve">
    <value>Sets package identity.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetProperties_Prop_Description" xml:space="preserve">
    <value>The package description.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetProperties_Prop_DisplayName" xml:space="preserve">
    <value>The display name for the package.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetProperties_Prop_Logo" xml:space="preserve">
    <value>The path to a internal logo.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetProperties_Prop_ModificationPackage" xml:space="preserve">
    <value>A boolean value representing whether this is a modification package.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetProperties_Prop_PublisherDisplayName" xml:space="preserve">
    <value>The display name of the publisher.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetProperties_VerbName" xml:space="preserve">
    <value>Sets package properties (like display name, logo, etc.)</value>
  </data>
  <data name="CLI_Verbs_Edit_SetRegistryKey_Prop_RegistryKey" xml:space="preserve">
    <value>A registry path (for example HKLM\Software\abc) of a registry key to be set.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetRegistryKey_VerbName" xml:space="preserve">
    <value>Sets registry key.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetRegistryValue_Prop_RegistryKey" xml:space="preserve">
    <value>Registry key (for example HKLM\Software\abc) containing edited value.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetRegistryValue_Prop_RegistryValueName" xml:space="preserve">
    <value>A value name to be set.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetRegistryValue_Prop_Value" xml:space="preserve">
    <value>The value.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetRegistryValue_Prop_ValueType" xml:space="preserve">
    <value>Value type.</value>
  </data>
  <data name="CLI_Verbs_Edit_SetRegistryValue_VerbName" xml:space="preserve">
    <value>Set a specific registry value.</value>
  </data>
  <data name="CLI_Verbs_Edit_VerbName" xml:space="preserve">
    <value>Edits a specified MSIX package.</value>
  </data>
  <data name="CLI_Verbs_ExtractCert_Prop_File" xml:space="preserve">
    <value>Path to a source package.</value>
  </data>
  <data name="CLI_Verbs_ExtractCert_Prop_Output" xml:space="preserve">
    <value>Full file path under which the extracted .CER file will be saved.</value>
  </data>
  <data name="CLI_Verbs_ExtractCert_VerbName" xml:space="preserve">
    <value>Extracts the certificate file (.CER) from an already signed MSIX package.</value>
  </data>
  <data name="CLI_Verbs_NewCert_Prop_DisplayName" xml:space="preserve">
    <value>The display name for the new certificate.</value>
  </data>
  <data name="CLI_Verbs_NewCert_Prop_Import" xml:space="preserve">
    <value>If set, the certificate will be imported to the local store. This option requires that MSIXHeroCLI.exe is started as administrator.</value>
  </data>
  <data name="CLI_Verbs_NewCert_Prop_OutputFolder" xml:space="preserve">
    <value>Directory, where certificate files will be saved.</value>
  </data>
  <data name="CLI_Verbs_NewCert_Prop_Password" xml:space="preserve">
    <value>Certificate password.</value>
  </data>
  <data name="CLI_Verbs_NewCert_Prop_Subject" xml:space="preserve">
    <value>Certificate subject, for example CN=John. If not provided, it will be set automatically from the display name.</value>
  </data>
  <data name="CLI_Verbs_NewCert_Prop_ValidUntil" xml:space="preserve">
    <value>Date time until which the certificate can be used for signing purposes. Defaults to one year from today.</value>
  </data>
  <data name="CLI_Verbs_NewCert_VerbName" xml:space="preserve">
    <value>Creates new certificate for self-signing.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_CopyFolderStructure" xml:space="preserve">
    <value>Indicates whether to copy the folder structure from the parent package. This option is only valid if --parentPackage parameter is defined AND the target file path is a folder.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_DisplayName" xml:space="preserve">
    <value>The displayed name of the new modification package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_IncludeFolder" xml:space="preserve">
    <value>Path to a folder that will be inserted into the root folder of the new modification package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_IncludeRegFile" xml:space="preserve">
    <value>Path to a .REG file containing registry keys to be inserted into the new modification package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_Name" xml:space="preserve">
    <value>The  name of the new modification package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_OutputPath" xml:space="preserve">
    <value>Path to the output file. If the specified value has extension .msix, a packaged package will be created. Otherwise, the value is treated as a folder where unpacked resources will be saved.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_ParentName" xml:space="preserve">
    <value>The name of the parent package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_ParentPackagePath" xml:space="preserve">
    <value>Full path to the parent package (a manifest or .msix package).</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_ParentPublisher" xml:space="preserve">
    <value>The name of the parent package publisher.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_PublisherDisplayName" xml:space="preserve">
    <value>The displayed name of the publisher of the new modification package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_PublisherName" xml:space="preserve">
    <value>The publisher name of the new modification package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_VerbName" xml:space="preserve">
    <value>Creates a new modification package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_Prop_Version" xml:space="preserve">
    <value>The version of the new modification package.</value>
  </data>
  <data name="CLI_Verbs_NewModPack_VerbName" xml:space="preserve">
    <value>Creates a new modification package.</value>
  </data>
  <data name="CLI_Verbs_Pack_Prop_Directory" xml:space="preserve">
    <value>Source directory to pack.</value>
  </data>
  <data name="CLI_Verbs_Pack_Prop_NoCompression" xml:space="preserve">
    <value>Prevents MSIX Hero from compressing files in the package. By default, files in the package are compressed based on detected file type.</value>
  </data>
  <data name="CLI_Verbs_Pack_Prop_NoValidation" xml:space="preserve">
    <value>Skips semantic validation. If you don't specify this option, MSIX Hero performs a full validation of the package.</value>
  </data>
  <data name="CLI_Verbs_Pack_Prop_Package" xml:space="preserve">
    <value>Output package path.</value>
  </data>
  <data name="CLI_Verbs_Pack_Prop_RemoveDirectoryAfterPacking" xml:space="preserve">
    <value>If set, the input directory will be removed after packing.</value>
  </data>
  <data name="CLI_Verbs_Pack_VerbName" xml:space="preserve">
    <value>Packs a folder.</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_DeviceGuardFile" xml:space="preserve">
    <value>Full path to JSON file containing access tokens to AzureAD.</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_DeviceGuardInteractive" xml:space="preserve">
    <value>A switch for interactive Device Guard signing (you will be asked for AzureAD credentials).</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_DeviceGuardSubject" xml:space="preserve">
    <value>Publisher name used for signing with Device Guard.</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_FilePath" xml:space="preserve">
    <value>Full paths to one or more files (separated by space).</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_IncreaseVersion" xml:space="preserve">
    <value>Specifies whether the version should be automatically increased, and (if yes) which component of it. Supported values are [None, Major, Minor, Build, Revision].</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_NoPublisherUpdate" xml:space="preserve">
    <value>Disables the automatic update of publisher name with the value of certificate subject.</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_PfxFilePath" xml:space="preserve">
    <value>Specifies the signing certificate in a file. If the file is in Personal Information Exchange (PFX) format and protected by a password, use the -p option to specify the password.</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_PfxPassword" xml:space="preserve">
    <value>Specifies the password to use when opening a PFX file.</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_ThumbPrint" xml:space="preserve">
    <value>Specifies the SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches.</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_TimeStampUrl" xml:space="preserve">
    <value>Specifies the URL of the RFC 3161 time stamp server. If not specified, the default value from MSIX Hero settings will be used.</value>
  </data>
  <data name="CLI_Verbs_Sign_Prop_UseMachineStore" xml:space="preserve">
    <value>Specifies that a machine store, instead of a user store, is used.</value>
  </data>
  <data name="CLI_Verbs_Sign_VerbName" xml:space="preserve">
    <value>Signs a package.</value>
  </data>
  <data name="CLI_Verbs_Trust_Prop_File" xml:space="preserve">
    <value>The file to import (a .CER file or an MSIX package).</value>
  </data>
  <data name="CLI_Verbs_Trust_VerbName" xml:space="preserve">
    <value>Imports a certificate or a certificate from MSIX to Trusted People store,</value>
  </data>
  <data name="CLI_Verbs_Unpack_Prop_Directory" xml:space="preserve">
    <value>Output directory.</value>
  </data>
  <data name="CLI_Verbs_Unpack_Prop_NoValidation" xml:space="preserve">
    <value>Skip semantic validation. If you don't specify this option, MSIX Hero performs a full validation of the package.</value>
  </data>
  <data name="CLI_Verbs_Unpack_Prop_Package" xml:space="preserve">
    <value>Source package path.</value>
  </data>
  <data name="CLI_Verbs_Unpack_Prop_RemovePackageAfterExtraction" xml:space="preserve">
    <value>If set, the input package will be removed after packing.</value>
  </data>
  <data name="CLI_Verbs_Unpack_VerbName" xml:space="preserve">
    <value>Unpacks an MSIX package to a folder.</value>
  </data>
  <data name="CLI_Verbs_UpdateImpact_Prop_IgnoreVersionMismatch" xml:space="preserve">
    <value>Forces the comparison even if the 'newVersion' is not higher than the 'oldVersion'.</value>
  </data>
  <data name="CLI_Verbs_UpdateImpact_Prop_NewPackagePath" xml:space="preserve">
    <value>The newer version of the package to compare. Accepted files: *.msix, *.appx, AppxManifest.xml and AppxBlockMap.xml.</value>
  </data>
  <data name="CLI_Verbs_UpdateImpact_Prop_OldPackagePath" xml:space="preserve">
    <value>The older version of the package to compare. Accepted files: *.msix, *.appx, AppxManifest.xml and AppxBlockMap.xml.</value>
  </data>
  <data name="CLI_Verbs_UpdateImpact_Prop_OutputXml" xml:space="preserve">
    <value>Full file path where the XML file with detailed comparison will be saved.</value>
  </data>
  <data name="CLI_Verbs_UpdateImpact_VerbName" xml:space="preserve">
    <value>Analyzes the difference between two packages and predicts the impact on updates.</value>
  </data>
</root>