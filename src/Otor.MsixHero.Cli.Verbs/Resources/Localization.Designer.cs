//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Otor.MsixHero.Cli.Verbs.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Localization {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Localization() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Otor.MsixHero.Cli.Verbs.Resources.Localization", typeof(Localization).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If specified, sample PS1 scripts for registration and de-registration will be created. This is currently supported only for VHD volumes..
        /// </summary>
        public static string CLI_Verbs_AppAttach_Prop_CreateScript {
            get {
                return ResourceManager.GetString("CLI_Verbs_AppAttach_Prop_CreateScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output directory..
        /// </summary>
        public static string CLI_Verbs_AppAttach_Prop_Directory {
            get {
                return ResourceManager.GetString("CLI_Verbs_AppAttach_Prop_Directory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If specified, digital certificate will be extracted from the specified package..
        /// </summary>
        public static string CLI_Verbs_AppAttach_Prop_ExtractCertificate {
            get {
                return ResourceManager.GetString("CLI_Verbs_AppAttach_Prop_ExtractCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of the output file..
        /// </summary>
        public static string CLI_Verbs_AppAttach_Prop_FileType {
            get {
                return ResourceManager.GetString("CLI_Verbs_AppAttach_Prop_FileType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File name for the output file. If left empty, the MSIX file name without extension will be used. This parameter is not used in case of multiple input packages..
        /// </summary>
        public static string CLI_Verbs_AppAttach_Prop_Name {
            get {
                return ResourceManager.GetString("CLI_Verbs_AppAttach_Prop_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full paths to MSIX packages to be converted to app attach format. If the path is a directory, then all MSIX from the folder will be converted..
        /// </summary>
        public static string CLI_Verbs_AppAttach_Prop_Package {
            get {
                return ResourceManager.GetString("CLI_Verbs_AppAttach_Prop_Package", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Size of the container (in MB). Leave empty for auto-selection..
        /// </summary>
        public static string CLI_Verbs_AppAttach_Prop_Size {
            get {
                return ResourceManager.GetString("CLI_Verbs_AppAttach_Prop_Size", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates app attach volume for MSIX packages..
        /// </summary>
        public static string CLI_Verbs_AppAttach_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_AppAttach_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to the package..
        /// </summary>
        public static string CLI_Verbs_Dependencies_Prop_Path {
            get {
                return ResourceManager.GetString("CLI_Verbs_Dependencies_Prop_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a list of relations between package dependencies, including nested dependencies, add-ons and system dependencies..
        /// </summary>
        public static string CLI_Verbs_Dependencies_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Dependencies_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the capability to add..
        /// </summary>
        public static string CLI_Verbs_Edit_AddCapability_Prop_Name {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_AddCapability_Prop_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds a specified capability to the package manifest..
        /// </summary>
        public static string CLI_Verbs_Edit_AddCapability_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_AddCapability_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set then in case the target file exists it will be overridden..
        /// </summary>
        public static string CLI_Verbs_Edit_AddFile_Prop_Force {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_AddFile_Prop_Force", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file from disk..
        /// </summary>
        public static string CLI_Verbs_Edit_AddFile_Prop_Source {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_AddFile_Prop_Source", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target relative path to current file..
        /// </summary>
        public static string CLI_Verbs_Edit_AddFile_Prop_Target {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_AddFile_Prop_Target", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds or replaces a specific file in the package..
        /// </summary>
        public static string CLI_Verbs_Edit_AddFile_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_AddFile_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relative path to removed file (file asterisks are supported)..
        /// </summary>
        public static string CLI_Verbs_Edit_DeleteFile_Prop_FilePath {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_DeleteFile_Prop_FilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes a specific file from the package..
        /// </summary>
        public static string CLI_Verbs_Edit_DeleteFile_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_DeleteFile_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A registry path (for example HKLM\Software\abc) of a registry key to be deleted..
        /// </summary>
        public static string CLI_Verbs_Edit_DeleteRegistryKey_Prop_RegistryKey {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_DeleteRegistryKey_Prop_RegistryKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes a specific registry key..
        /// </summary>
        public static string CLI_Verbs_Edit_DeleteRegistryKey_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_DeleteRegistryKey_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A registry path (for example HKLM\Software\abc) of a registry key containg the value to be deleted..
        /// </summary>
        public static string CLI_Verbs_Edit_DeleteRegistryValue_Prop_RegistryKey {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_DeleteRegistryValue_Prop_RegistryKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value name to be deleted..
        /// </summary>
        public static string CLI_Verbs_Edit_DeleteRegistryValue_Prop_RegistryValueName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_DeleteRegistryValue_Prop_RegistryValueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes a specific registry value..
        /// </summary>
        public static string CLI_Verbs_Edit_DeleteRegistryValue_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_DeleteRegistryValue_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A .reg file (Windows Registry) to be imported..
        /// </summary>
        public static string CLI_Verbs_Edit_ImportRegistry_Prop_File {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_ImportRegistry_Prop_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A local registry path (for example HKLM\Software\abc) of a registry key to be imported..
        /// </summary>
        public static string CLI_Verbs_Edit_ImportRegistry_Prop_RegistryKey {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_ImportRegistry_Prop_RegistryKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports registry from .reg file or local Registry..
        /// </summary>
        public static string CLI_Verbs_Edit_ImportRegistry_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_ImportRegistry_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifiers of applications, for which PSF runtime will be used. Simple wildcards (* and ?) and regular expressions (/&lt;regex&gt;/) are also supported. If left empty or omitted, all win32 applications will be considered.
        ///
        ///Parameters applicationIds and fileNames are mutually exclusive..
        /// </summary>
        public static string CLI_Verbs_Edit_InjectPsf_ApplicationIds {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_InjectPsf_ApplicationIds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start file names of applications, for which PSF runtime will be used. Simple wildcards (* and ?) and regular expressions (/&lt;regex&gt;/) are also supported. If left empty or omitted, all win32 applications will be considered.
        ///
        ///Parameters applicationIds and fileNames are mutually exclusive..
        /// </summary>
        public static string CLI_Verbs_Edit_InjectPsf_FileNames {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_InjectPsf_FileNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, this allows replacing existing PSF framework. By default, if PSF runtime is already present in the package, no replacement will be done..
        /// </summary>
        public static string CLI_Verbs_Edit_InjectPsf_Force {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_InjectPsf_Force", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Injects PSF runtime and readdress entry points of specified or all applications..
        /// </summary>
        public static string CLI_Verbs_Edit_InjectPsf_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_InjectPsf_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File path to a file containing the instructions to execute. If not provided, the user can provide the required content from the console..
        /// </summary>
        public static string CLI_Verbs_Edit_List_Prop_File {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_List_Prop_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executes a list of commands, either from a file or from a command prompt..
        /// </summary>
        public static string CLI_Verbs_Edit_List_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_List_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full path to the edited package..
        /// </summary>
        public static string CLI_Verbs_Edit_Prop_PackagePath {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_Prop_PackagePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the component, for example SignTool.exe..
        /// </summary>
        public static string CLI_Verbs_Edit_SetBuildMetaData_Prop_Name {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetBuildMetaData_Prop_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the component, for example 1.0.0..
        /// </summary>
        public static string CLI_Verbs_Edit_SetBuildMetaData_Prop_Version {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetBuildMetaData_Prop_Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds a specified build meta data to the package manifest..
        /// </summary>
        public static string CLI_Verbs_Edit_SetBuildMetaData_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetBuildMetaData_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package name..
        /// </summary>
        public static string CLI_Verbs_Edit_SetIdentity_Prop_Name {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetIdentity_Prop_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The processor architecture, for example x64, arm or Neutral..
        /// </summary>
        public static string CLI_Verbs_Edit_SetIdentity_Prop_ProcessorArchitecture {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetIdentity_Prop_ProcessorArchitecture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DN string of a publisher..
        /// </summary>
        public static string CLI_Verbs_Edit_SetIdentity_Prop_Publisher {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetIdentity_Prop_Publisher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource ID..
        /// </summary>
        public static string CLI_Verbs_Edit_SetIdentity_Prop_ResourceId {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetIdentity_Prop_ResourceId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package version. It must be a valid version string. You can also write &apos;auto&apos; to autoincrement the version, or use placeholders ^ or + to increase a unit, and &apos;x&apos; or &apos;*&apos; to keep the unit. For example, the version *.*.+.0 would keep the major and minor version from the current value, increase the third position by one, and reset the fourth position to 0..
        /// </summary>
        public static string CLI_Verbs_Edit_SetIdentity_Prop_Version {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetIdentity_Prop_Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets package identity..
        /// </summary>
        public static string CLI_Verbs_Edit_SetIdentity_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetIdentity_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package description..
        /// </summary>
        public static string CLI_Verbs_Edit_SetProperties_Prop_Description {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetProperties_Prop_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display name for the package..
        /// </summary>
        public static string CLI_Verbs_Edit_SetProperties_Prop_DisplayName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetProperties_Prop_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to a internal logo..
        /// </summary>
        public static string CLI_Verbs_Edit_SetProperties_Prop_Logo {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetProperties_Prop_Logo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A boolean value representing whether this is a modification package..
        /// </summary>
        public static string CLI_Verbs_Edit_SetProperties_Prop_ModificationPackage {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetProperties_Prop_ModificationPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display name of the publisher..
        /// </summary>
        public static string CLI_Verbs_Edit_SetProperties_Prop_PublisherDisplayName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetProperties_Prop_PublisherDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets package properties (like display name, logo, etc.).
        /// </summary>
        public static string CLI_Verbs_Edit_SetProperties_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetProperties_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A registry path (for example HKLM\Software\abc) of a registry key to be set..
        /// </summary>
        public static string CLI_Verbs_Edit_SetRegistryKey_Prop_RegistryKey {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetRegistryKey_Prop_RegistryKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets registry key..
        /// </summary>
        public static string CLI_Verbs_Edit_SetRegistryKey_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetRegistryKey_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registry key (for example HKLM\Software\abc) containing edited value..
        /// </summary>
        public static string CLI_Verbs_Edit_SetRegistryValue_Prop_RegistryKey {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetRegistryValue_Prop_RegistryKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value name to be set..
        /// </summary>
        public static string CLI_Verbs_Edit_SetRegistryValue_Prop_RegistryValueName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetRegistryValue_Prop_RegistryValueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value..
        /// </summary>
        public static string CLI_Verbs_Edit_SetRegistryValue_Prop_Value {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetRegistryValue_Prop_Value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value type..
        /// </summary>
        public static string CLI_Verbs_Edit_SetRegistryValue_Prop_ValueType {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetRegistryValue_Prop_ValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set a specific registry value..
        /// </summary>
        public static string CLI_Verbs_Edit_SetRegistryValue_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_SetRegistryValue_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edits a specified MSIX package..
        /// </summary>
        public static string CLI_Verbs_Edit_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Edit_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to a source package..
        /// </summary>
        public static string CLI_Verbs_ExtractCert_Prop_File {
            get {
                return ResourceManager.GetString("CLI_Verbs_ExtractCert_Prop_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full file path under which the extracted .CER file will be saved..
        /// </summary>
        public static string CLI_Verbs_ExtractCert_Prop_Output {
            get {
                return ResourceManager.GetString("CLI_Verbs_ExtractCert_Prop_Output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extracts the certificate file (.CER) from an already signed MSIX package..
        /// </summary>
        public static string CLI_Verbs_ExtractCert_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_ExtractCert_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The display name for the new certificate..
        /// </summary>
        public static string CLI_Verbs_NewCert_Prop_DisplayName {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewCert_Prop_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, the certificate will be imported to the local store. This option requires that MSIXHeroCLI.exe is started as administrator..
        /// </summary>
        public static string CLI_Verbs_NewCert_Prop_Import {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewCert_Prop_Import", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory, where certificate files will be saved..
        /// </summary>
        public static string CLI_Verbs_NewCert_Prop_OutputFolder {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewCert_Prop_OutputFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate password..
        /// </summary>
        public static string CLI_Verbs_NewCert_Prop_Password {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewCert_Prop_Password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate subject, for example CN=John. If not provided, it will be set automatically from the display name..
        /// </summary>
        public static string CLI_Verbs_NewCert_Prop_Subject {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewCert_Prop_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Date time until which the certificate can be used for signing purposes. Defaults to one year from today..
        /// </summary>
        public static string CLI_Verbs_NewCert_Prop_ValidUntil {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewCert_Prop_ValidUntil", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates new certificate for self-signing..
        /// </summary>
        public static string CLI_Verbs_NewCert_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewCert_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates whether to copy the folder structure from the parent package. This option is only valid if --parentPackage parameter is defined AND the target file path is a folder..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_CopyFolderStructure {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_CopyFolderStructure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The displayed name of the new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_DisplayName {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to a folder that will be inserted into the root folder of the new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_IncludeFolder {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_IncludeFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to a .REG file containing registry keys to be inserted into the new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_IncludeRegFile {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_IncludeRegFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The  name of the new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_Name {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the output file. If the specified value has extension .msix, a packaged package will be created. Otherwise, the value is treated as a folder where unpacked resources will be saved..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_OutputPath {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_OutputPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the parent package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_ParentName {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_ParentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full path to the parent package (a manifest or .msix package)..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_ParentPackagePath {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_ParentPackagePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the parent package publisher..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_ParentPublisher {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_ParentPublisher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The displayed name of the publisher of the new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_PublisherDisplayName {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_PublisherDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The publisher name of the new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_PublisherName {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_PublisherName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_Prop_Version {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_Prop_Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a new modification package..
        /// </summary>
        public static string CLI_Verbs_NewModPack_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_NewModPack_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source directory to pack..
        /// </summary>
        public static string CLI_Verbs_Pack_Prop_Directory {
            get {
                return ResourceManager.GetString("CLI_Verbs_Pack_Prop_Directory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevents MSIX Hero from compressing files in the package. By default, files in the package are compressed based on detected file type..
        /// </summary>
        public static string CLI_Verbs_Pack_Prop_NoCompression {
            get {
                return ResourceManager.GetString("CLI_Verbs_Pack_Prop_NoCompression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skips semantic validation. If you don&apos;t specify this option, MSIX Hero performs a full validation of the package..
        /// </summary>
        public static string CLI_Verbs_Pack_Prop_NoValidation {
            get {
                return ResourceManager.GetString("CLI_Verbs_Pack_Prop_NoValidation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output package path..
        /// </summary>
        public static string CLI_Verbs_Pack_Prop_Package {
            get {
                return ResourceManager.GetString("CLI_Verbs_Pack_Prop_Package", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, the input directory will be removed after packing..
        /// </summary>
        public static string CLI_Verbs_Pack_Prop_RemoveDirectoryAfterPacking {
            get {
                return ResourceManager.GetString("CLI_Verbs_Pack_Prop_RemoveDirectoryAfterPacking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Packs a folder..
        /// </summary>
        public static string CLI_Verbs_Pack_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Pack_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full path to JSON file containing access tokens to AzureAD..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_DeviceGuardFile {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_DeviceGuardFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch for interactive Device Guard signing (you will be asked for AzureAD credentials)..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_DeviceGuardInteractive {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_DeviceGuardInteractive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Publisher name used for signing with Device Guard..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_DeviceGuardSubject {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_DeviceGuardSubject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full paths to one or more files (separated by space)..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_FilePath {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_FilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies whether the version should be automatically increased, and (if yes) which component of it. Supported values are [None, Major, Minor, Build, Revision]..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_IncreaseVersion {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_IncreaseVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disables the automatic update of publisher name with the value of certificate subject..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_NoPublisherUpdate {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_NoPublisherUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the signing certificate in a file. If the file is in Personal Information Exchange (PFX) format and protected by a password, use the -p option to specify the password..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_PfxFilePath {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_PfxFilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the password to use when opening a PFX file..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_PfxPassword {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_PfxPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_ThumbPrint {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_ThumbPrint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the URL of the RFC 3161 time stamp server. If not specified, the default value from MSIX Hero settings will be used..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_TimeStampUrl {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_TimeStampUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies that a machine store, instead of a user store, is used..
        /// </summary>
        public static string CLI_Verbs_Sign_Prop_UseMachineStore {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_Prop_UseMachineStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signs a package..
        /// </summary>
        public static string CLI_Verbs_Sign_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Sign_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file to import (a .CER file or an MSIX package)..
        /// </summary>
        public static string CLI_Verbs_Trust_Prop_File {
            get {
                return ResourceManager.GetString("CLI_Verbs_Trust_Prop_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports a certificate or a certificate from MSIX to Trusted People store,.
        /// </summary>
        public static string CLI_Verbs_Trust_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Trust_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output directory..
        /// </summary>
        public static string CLI_Verbs_Unpack_Prop_Directory {
            get {
                return ResourceManager.GetString("CLI_Verbs_Unpack_Prop_Directory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip semantic validation. If you don&apos;t specify this option, MSIX Hero performs a full validation of the package..
        /// </summary>
        public static string CLI_Verbs_Unpack_Prop_NoValidation {
            get {
                return ResourceManager.GetString("CLI_Verbs_Unpack_Prop_NoValidation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source package path..
        /// </summary>
        public static string CLI_Verbs_Unpack_Prop_Package {
            get {
                return ResourceManager.GetString("CLI_Verbs_Unpack_Prop_Package", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, the input package will be removed after packing..
        /// </summary>
        public static string CLI_Verbs_Unpack_Prop_RemovePackageAfterExtraction {
            get {
                return ResourceManager.GetString("CLI_Verbs_Unpack_Prop_RemovePackageAfterExtraction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unpacks an MSIX package to a folder..
        /// </summary>
        public static string CLI_Verbs_Unpack_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_Unpack_VerbName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces the comparison even if the &apos;newVersion&apos; is not higher than the &apos;oldVersion&apos;..
        /// </summary>
        public static string CLI_Verbs_UpdateImpact_Prop_IgnoreVersionMismatch {
            get {
                return ResourceManager.GetString("CLI_Verbs_UpdateImpact_Prop_IgnoreVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The newer version of the package to compare. Accepted files: *.msix, *.appx, AppxManifest.xml and AppxBlockMap.xml..
        /// </summary>
        public static string CLI_Verbs_UpdateImpact_Prop_NewPackagePath {
            get {
                return ResourceManager.GetString("CLI_Verbs_UpdateImpact_Prop_NewPackagePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The older version of the package to compare. Accepted files: *.msix, *.appx, AppxManifest.xml and AppxBlockMap.xml..
        /// </summary>
        public static string CLI_Verbs_UpdateImpact_Prop_OldPackagePath {
            get {
                return ResourceManager.GetString("CLI_Verbs_UpdateImpact_Prop_OldPackagePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full file path where the XML file with detailed comparison will be saved..
        /// </summary>
        public static string CLI_Verbs_UpdateImpact_Prop_OutputXml {
            get {
                return ResourceManager.GetString("CLI_Verbs_UpdateImpact_Prop_OutputXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzes the difference between two packages and predicts the impact on updates..
        /// </summary>
        public static string CLI_Verbs_UpdateImpact_VerbName {
            get {
                return ResourceManager.GetString("CLI_Verbs_UpdateImpact_VerbName", resourceCulture);
            }
        }
    }
}
